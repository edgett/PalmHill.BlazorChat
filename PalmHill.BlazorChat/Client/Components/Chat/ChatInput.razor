@using Microsoft.AspNetCore.Components.Forms
@using System.Collections.Concurrent
@inject IJSRuntime JSRuntime

<style>
    .counterbadge-container {
        display: block !important;
    }

</style>

<FluentFooter Class="w-100" Style="position:fixed; bottom:15px;">
    <FluentStack Class="chat-messages input-area">
        <div class="file-input-area" @onclick="_toggleAttachmentVisible">
            <FluentCounterBadge Count="Controller?.AttachmentService?.UploadedFiles.Count ?? 0"
                                ShowZero="true"
                                BottomPosition="-10">
                <FluentButton Id="uploadButton" Disabled="Controller?.AttachmentService is null"
                              IconStart="(new Icons.Regular.Size24.Attach())"
                              Style="margin-top:6px;"></FluentButton>
            </FluentCounterBadge>
        </div>
        <div style="flex-grow:1;" class="min-h-100">
            <textarea placeholder="Shift+Enter for new line"
                      rows="1"
                      @ref="textAreaElement"
                      @bind="Controller!.UserInput"
                      class="main-textarea"
                      @onkeyup="_handleKeyPress"
                      @bind:event="oninput"></textarea>
        </div>
        <div>
            @if (Controller?.CanSend == true)
            {
                <FluentButton OnClick="_sendPrompt"
                              Disabled="!UserInputValid"
                              Appearance="Appearance.Accent"
                              IconStart="(new Icons.Regular.Size24.Send())"
                              Style="margin-top:6px;"></FluentButton>

            }

            @if (Controller?.CanStop == true)
            {
                <FluentButton OnClick="_cancelTextGeneration"
                              Appearance="Appearance.Accent"
                              IconStart="(new Icons.Regular.Size24.Stop())"
                              Style="margin-top:6px;"></FluentButton>

            }

        </div>
    </FluentStack>
</FluentFooter>


@code {
    [Parameter]
    public ChatService? Controller { get; set; }

    /// <summary>
    /// Reference to the main text area. Used to resize it.
    /// </summary>
    private ElementReference textAreaElement;

    /// <summary>
    /// Sends the prompt to the server.
    /// </summary>
    private async Task _sendPrompt()
    {
        await _sizeTextArea();
        await Controller!.SendPrompt();
    }

    /// <summary>
    /// Cancels the text generation.
    /// </summary>
    private async Task _cancelTextGeneration()
    {
        await Controller!.CancelTextGeneration();
    }

    /// <summary>
    /// Handel key press events from the main text area.
    /// Send prompt on enter.
    /// </summary>
    /// <param name="e">The key pressed.</param>
    private async Task _handleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey && UserInputValid)
        {
            await _sendPrompt();
        }
    }

    public bool UserInputValid { get => userInnputValid();  }

    /// <summary>
    /// Resizes the main text area.
    /// </summary>
    private async Task _sizeTextArea()
    {
        await JSRuntime.InvokeVoidAsync("textAreaAdjust", textAreaElement);
    }

    private void _toggleAttachmentVisible()
    {
        Controller?.AttachmentService?.ToggleAttachmentsVisible();
    }

    private bool userInnputValid()
    {
        return !string.IsNullOrWhiteSpace(Controller!.UserInput);
    }





}
